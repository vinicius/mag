/*
 * Created on 20/01/2006
 *
 * TODO To change the template for this generated file go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
package core.ft.stablestorage.behaviours;

import jade.content.AgentAction;
import jade.content.ContentElement;
import jade.core.Agent;
import jade.domain.FIPAAgentManagement.FailureException;
import jade.domain.FIPAAgentManagement.NotUnderstoodException;
import jade.domain.FIPAAgentManagement.RefuseException;
import jade.lang.acl.ACLMessage;
import jade.lang.acl.MessageTemplate;
import jade.proto.AchieveREResponder;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;

import core.ft.stablestorage.StableStorage;
import core.ontology.Checkpoint;
import core.ontology.SaveCheckpointAction;
/**
 * @author publico
 *
 * TODO To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
public class ReceiveSaveCheckpointRequest extends AchieveREResponder {
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 2106147450170607064L;

	public ReceiveSaveCheckpointRequest (StableStorage stableStorage, MessageTemplate mt) {
		super((Agent) stableStorage, mt);
	}
	
	protected ACLMessage prepareResponse (ACLMessage msg) throws NotUnderstoodException, RefuseException {
		ACLMessage reply = msg.createReply();
		reply.setPerformative(ACLMessage.AGREE);
		
		ContentElement ce = null;
		
		try {
		    ce = myAgent.getContentManager().extractContent (msg);
		} catch (Exception e) {
			throw new NotUnderstoodException ("Your request was not understood");
		}
		
		if (ce instanceof AgentAction) {
	    	AgentAction a = (AgentAction) ce;
	    	
	    	if ( !(a instanceof SaveCheckpointAction) ) {
	    		throw new NotUnderstoodException ("Your action request was not understood");
	    	}
	    } else {
	    	throw new NotUnderstoodException ("Your request is not an action");
	    }
		
		return reply;
	}
	
	protected ACLMessage prepareResultNotification (ACLMessage request, ACLMessage response) throws FailureException {
		ACLMessage reply = request.createReply();
		reply.setPerformative(ACLMessage.INFORM);
		
		try {
			SaveCheckpointAction saveCheckpointAction = (SaveCheckpointAction) myAgent.getContentManager().extractContent (request);
		    
			boolean success = this.saveCheckpoint (saveCheckpointAction.getExecId() , saveCheckpointAction.getCheckpoint());
		    
    		if (!success) {
    			throw new FailureException ("An error occurred when your request was being processed");
			}
		} catch (Exception e) {
			throw new FailureException ("An error occurred when your request was being processed");
		}
		
		return reply;
	}
	
	/**
	 * This method storage checkpoint information. It associate the Id execution of 
	 * application with checkpoint object.
	 * 
	 * @param appExecutionId The Id execution
	 * @param checkpoint The object that contains the checkpoint information
	 * 
	 * @return boolean If true, success, otherwise, false
	 */
	private boolean saveCheckpoint (String appExecutionId, Checkpoint checkpoint) {
		boolean status = true;
		File checkpointFile = new File (StableStorage.checkpointDir + "/" + appExecutionId + ".ckp");
		
		try {
			ObjectOutputStream output = new ObjectOutputStream (new FileOutputStream (checkpointFile));
			output.writeObject (checkpoint.getContent());
			output.flush();
			output.close();
		} catch (IOException e) {
			status = false;
			e.printStackTrace();
		}
		
		return status;		
	}
}
